{
  "name": "CPR Processing",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyHour"
            }
          ]
        },
        "watchFolder": true,
        "folderId": {
          "__rl": true,
          "mode": "id",
          "value": ""
        },
        "options": {
          "folderChild": true
        }
      },
      "type": "n8n-nodes-base.microsoftOneDriveTrigger",
      "typeVersion": 1,
      "position": [
        -2760,
        -1000
      ],
      "id": "435d7c36-63de-492c-acba-56cc0956d3e3",
      "name": "Microsoft OneDrive Trigger",
      "credentials": {
        "microsoftOneDriveOAuth2Api": {
          "id": "9TQraYhodXqRdX4C",
          "name": "Microsoft Drive account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://motivationinc.sharepoint.com/:f:/s/MotivationInc.ComplianceTraining/EjUIUUN3In1DlifEb4IfDEABldurpcKFywq2Mvfa1Wi-Ng?e=E4bKPK",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftSharePointOAuth2Api",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2560,
        -1000
      ],
      "id": "19dad9a1-7144-45e8-b41b-659fe9994abe",
      "name": "Microsoft SharePoint HTTP Request",
      "retryOnFail": false,
      "extendsCredential": "microsoftSharePointOAuth2Api",
      "credentials": {
        "microsoftSharePointOAuth2Api": {
          "id": "gvniOfCw4a89XICD",
          "name": "Microsoft SharePoint account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -3060,
        -980
      ],
      "id": "98250b5b-d2b0-4af1-8c17-f855749fd0ee",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.emailReadImap",
      "typeVersion": 2,
      "position": [
        -2340,
        -1000
      ],
      "id": "cfbbca93-2466-4e03-be77-b5e24a771f1e",
      "name": "Email Trigger (IMAP)"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "filters": {},
        "options": {}
      },
      "type": "n8n-nodes-base.microsoftOutlookTrigger",
      "typeVersion": 1,
      "position": [
        -2120,
        -1000
      ],
      "id": "4596b652-e9a1-4300-9434-fec8a62c8e0d",
      "name": "Microsoft Outlook Trigger",
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "KRsI4DIJd3bkqqea",
          "name": "Microsoft Outlook account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Input triggers (get one of these working correctly)",
        "height": 300,
        "width": 1180
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2860,
        -1080
      ],
      "typeVersion": 1,
      "id": "8cb437d4-0ed6-475b-856e-b1d2f73fa332",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1AxigpIPGhDfygWjBffaGg38q0KHVhoFy",
          "mode": "list",
          "cachedResultName": "Document Uploads",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1AxigpIPGhDfygWjBffaGg38q0KHVhoFy"
        },
        "event": "fileCreated",
        "options": {}
      },
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [
        -3180,
        -660
      ],
      "id": "49f82978-11be-4581-b527-fef5d3ed18d2",
      "name": "Google Drive Trigger",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "8JZ4vyw4ssHFWCLA",
          "name": "Google Drive account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "options": {
          "fileName": "={{ $json.originalFilename }}"
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -3000,
        -660
      ],
      "id": "5bc94335-1f70-4ddd-8c19-2149decd0e7b",
      "name": "Google Drive",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "8JZ4vyw4ssHFWCLA",
          "name": "Google Drive account 2"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "eea5d22c-cd07-45d4-b9af-2ae9e0247a0b",
              "leftValue": "={{ $json.fileExtension }}",
              "rightValue": "=pdf",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2840,
        -660
      ],
      "id": "2146c502-f6b8-40f9-a3ac-999009c6d216",
      "name": "Is PDF",
      "alwaysOutputData": false,
      "notesInFlow": false
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.pdfrest.com/jpg",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Api-Key",
              "value": "60238958-b2de-4e0c-9e59-209ed708369d"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            },
            {
              "name": "output",
              "value": "jpg-images"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2500,
        -720
      ],
      "id": "4c6f11a8-049a-4467-9a1d-101f317ba97b",
      "name": "PDF-to-JPG2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an expert for a data data entry assistant who helps answer questions only from a corpus of documents from database. This is a json of payroll data and a base64 encoded jpeg images. Make sure that these images that are base64 encoded jpeg images match the content that is present. Append a top level header to the json to indicate if the parsing was executed correctly (pass or fail). {{ $json.imageBlocks }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -2460,
        -200
      ],
      "id": "aece7826-ba94-44b5-8376-2ed317fb4fc9",
      "name": "AI Agent"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.4,
      "position": [
        -2460,
        120
      ],
      "id": "da9e1e2c-10da-4f2f-8569-ead51d345385",
      "name": "Redis Chat Memory",
      "credentials": {
        "redis": {
          "id": "hMQwKP7TIisEQhLC",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.1,
      "position": [
        -2600,
        60
      ],
      "id": "7af99d41-6dc4-472d-bb95-e726b2a99160",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "QStpVDzaqxkFs4CU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "instructions": "Separate the choices[0].message.content into employee blocks with the following schema:\n    employee:\n        name,\n        last4ssn,\n        workClassification,\n        totalHours,\n        rateOfPay,\n        grossAmountEarned,\n        numberOfWithholdingExemptions,\n        netWagesPaidForWeek",
        "codeGeneratedForPrompt": "Separate the choices[0].message.content into employee blocks with the following schema:\n    employee:\n        name,\n        last4ssn,\n        workClassification,\n        totalHours,\n        rateOfPay,\n        grossAmountEarned,\n        numberOfWithholdingExemptions,\n        netWagesPaidForWeek",
        "jsCode": "const items = $input.all();\nconst employeeBlocks = items\n  .map((item) => {\n    const content = JSON.parse(item.json.choices[0].message.content);\n    const employees = content.properties.labor.employee;\n    return employees.map((employee) => {\n      return {\n        name: employee.name,\n        last4ssn: employee.ssn.split(\"-\")[2],\n        workClassification: employee.workClassification,\n        totalHours: employee.totalHours,\n        rateOfPay: employee.rateOfPay,\n        grossAmountEarned: employee.grossAmountEarned,\n        numberOfWithholdingExemptions: employee.numberOfWithholdingExemptions,\n        netWagesPaidForWeek: employee.netAmountEarned,\n      };\n    });\n  })\n  .flat();\n\nreturn employeeBlocks;\n"
      },
      "type": "n8n-nodes-base.aiTransform",
      "typeVersion": 1,
      "position": [
        -1520,
        -660
      ],
      "id": "343b6b1e-6e27-4df3-afde-58f494ac4ed4",
      "name": "Marshall to REST"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://api.s3lion.motivation-inc.com/employee_payroll?name={{ $json.name }}&last4ssn={{ $json.last4ssn }}&workClassification={{ $json.workClassification }}&rateOfPay={{ $json.rateOfPay }}&grossAmountEarned={{ $json.grossAmountEarned }}&deduct_FICA=0&deduct_taxWithholding=0&deduct_healthInsurance=0&deduct_retirement401k=0&deduct_other=0&deduct_totalDeductions=0&numberOfWithholdingExemptions={{ $json.numberOfWithholdingExemptions }}&netWagesPaidForWeek={{ $json.netWagesPaidForWeek }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1320,
        -660
      ],
      "id": "0febfded-26f7-4c54-8096-a55dc0107992",
      "name": "PUT Request",
      "notesInFlow": true,
      "notes": "PUT: https://s3lion.dev.motivation-inc.com/api/api/employee_payroll?"
    },
    {
      "parameters": {
        "content": "## DB Updating",
        "height": 260,
        "width": 560,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1680,
        -740
      ],
      "id": "d561c6c7-6fd5-4895-bdfb-fcb1fbb84cce",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Continuous Learning",
        "height": 580,
        "width": 940,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2640,
        -240
      ],
      "id": "c5b78f28-05a3-44ff-881c-7545d79cfe28",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## Parsing",
        "height": 460,
        "width": 940,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2640,
        -740
      ],
      "id": "18e4840c-62b8-4741-af72-2fd1ca28ebeb",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## Detecting",
        "height": 260,
        "width": 580,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3260,
        -740
      ],
      "id": "97692760-88d7-4260-8c09-d70654f681a0",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "batchSize": 2,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -2500,
        -520
      ],
      "id": "e7853db0-154a-4ec3-a9b3-e62806c9419a",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "fieldToSplitOut": "outputUrl",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -2340,
        -720
      ],
      "id": "112f9738-61fc-425f-be8e-0b62fc19dbc6",
      "name": "Split Out"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -1860,
        -660
      ],
      "id": "59983dfe-ebc7-4feb-850a-6cdb9a950d3f",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "=Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"model\": \"gpt-4o-mini\",\n    \"messages\": [\n      {\n        \"role\": \"system\",\n        \"content\": \"You are an expert in image analysis and structured data extraction. You will be given an image and should extract pertinent employee information and return it in a structured format. The signatory party is the company that is signing the agreement and should be added to who approved the agreement. Your response must adhere to the provided JSON schema.\"\n      },\n      {\n        \"role\": \"user\",\n        \"content\": [\n                    {\n          \"type\": \"text\",\n          \"text\": \"Please convert this document into the response format provided. Please ignore the PDFRest watermark on the document and access the underlying text. The water mark says PDFRest, This Document was processed with a free account at pdfrest.com, upgrade to remove this message from output files.\" },\n          {{ JSON.stringify($('JPG-to-Img-Blocks').item.json.imageBlocks).slice(1, -1) }}\n        ]\n      }\n    ],\n    \"response_format\": {\n    \"type\": \"json_schema\",\n    \"json_schema\": {\n      \"name\": \"document_analysis\",\n      \"schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"labor\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"employee\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"name\": { \"type\": \"string\" },\n                    \"ssn\": { \"type\": \"string\" },\n                    \"workClassification\": { \"type\": \"string\" },\n                    \"daysWorked\": {\n                      \"type\": \"array\",\n                      \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"day\": { \"type\": \"number\" },\n                          \"month\": { \"type\": \"number\" },\n                          \"year\": { \"type\": \"number\" },\n                          \"dayOfWeek\": { \"enum\": [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"] },\n                          \"hoursWorked\": { \"type\": \"number\" },\n                          \"hoursOvertime\": { \"type\": \"number\" }\n                        },\n                        \"required\": [\"day\", \"month\", \"year\", \"dayOfWeek\", \"hoursWorked\", \"hoursOvertime\"]\n                      }\n                    },\n                    \"totalHours\": { \"type\": \"integer\" },\n                    \"rateOfPay\": { \"type\": \"number\" },\n                    \"grossAmountEarned\": { \"type\": \"number\" },\n                    \"deductions\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"FICA\": { \"type\": \"number\" },\n                        \"taxWithholding\": { \"type\": \"number\" },\n                        \"healthInsurance\": { \"type\": \"number\" },\n                        \"retirement401k\": { \"type\": \"number\" },\n                        \"other\": { \"type\": \"number\" },\n                        \"totalDeductions\": { \"type\": \"number\" }\n                      },\n                      \"required\": [\"FICA\", \"taxWithholding\", \"healthInsurance\", \"retirement401k\", \"other\", \"totalDeductions\"]\n                    },\n                    \"netAmountEarned\": { \"type\": \"number\" },\n                    \"numberOfWithholdingExemptions\": { \"type\": \"integer\" }\n                  },\n                  \"required\": [\n                    \"name\",\n                    \"ssn\",\n                    \"workClassification\",\n                    \"daysWorked\",\n                    \"totalHours\",\n                    \"rateOfPay\",\n                    \"grossAmountEarned\",\n                    \"deductions\",\n                    \"netAmountEarned\",\n                    \"numberOfWithholdingExemptions\"\n                  ]\n                }\n              },\n              \"contractor\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"name\": { \"type\": \"string\" },\n                  \"address\": { \"type\": \"string\" }\n                },\n                \"required\": [\"name\", \"address\"]\n              },\n              \"project\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"name\": { \"type\": \"string\" },\n                  \"location\": { \"type\": \"string\" },\n                  \"contractNumber\": { \"type\": \"string\" }\n                },\n                \"required\": [\"name\", \"location\", \"contractNumber\"]\n              },\n              \"payroll\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"weekEnding\": { \"type\": \"string\" },\n                  \"start\": { \"type\": \"string\" },\n                  \"end\": { \"type\": \"string\" }\n                },\n                \"required\": [\"weekEnding\", \"start\", \"end\"]\n              },\n              \"signatory\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"name\": { \"type\": \"string\" },\n                  \"title\": { \"type\": \"string\" },\n                  \"fringeBenefitsToApprovedEntities\": { \"type\": \"boolean\" },\n                  \"fringeBenefitsPaidInCash\": { \"type\": \"boolean\" }\n                },\n                \"required\": [\"name\", \"title\", \"fringeBenefitsPaidInCash\", \"fringeBenefitsToApprovedEntities\"]\n              }\n            },\n            \"required\": [\"employee\", \"contractor\", \"project\", \"payroll\", \"signatory\"]\n          },\n          \"confidence_score\": { \"type\": \"number\" },\n          \"analysis_details\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"detected_keywords\": {\n                \"type\": \"array\",\n                \"items\": { \"type\": \"string\" }\n              },\n              \"reasoning\": { \"type\": \"string\" },\n              \"timestamp\": { \"type\": \"string\" }\n            },\n            \"required\": [\"detected_keywords\", \"reasoning\", \"timestamp\"]\n          }\n        },\n        \"required\": [\"labor\", \"confidence_score\", \"analysis_details\"],\n        \"additionalProperties\": false\n      }\n    }\n  }\n}",
        "options": {}
      },
      "id": "25756303-00ae-4569-9176-166d762197d6",
      "name": "OpenAI OCR1",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -2020,
        -480
      ],
      "typeVersion": 4.2,
      "credentials": {
        "openAiApi": {
          "id": "QStpVDzaqxkFs4CU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Step 1: Retrieve outputUrls safely\nlet outputUrls = [];\noutputUrls.push($input.first().json.outputUrl);\noutputUrls.push($input.last().json.outputUrl);\nconst urls = { outputUrl: outputUrls };\nconsole.log(urls);\n\n// Step 2: Ensure outputUrls is an array\nif (!Array.isArray(urls.outputUrl)) {\n    throw new Error(\"Invalid format: outputUrls should be an array\");\n}\n\n// Step 3: Transform into the required structure\nconst imageBlocks = urls.outputUrl.map(item => ({\n    type: \"image_url\",\n    image_url: { url: item, detail: \"high\", },\n    \n}));\n\n\n// Step 4: Return result\nconst result = [{ json: { imageBlocks } }];\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2340,
        -480
      ],
      "id": "910c7e31-a781-46bb-b3e2-6e51ca73fb38",
      "name": "JPG-to-Img-Blocks"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import cv2\nimport numpy as np\nimport base64\nimport urllib3\nfrom io import BytesIO\nimport json\n\ndef process_image_from_url(image_url):\n    \"\"\"Fetches image from URL, processes it, and returns base64 encoded string.\"\"\"\n    try:\n        http = urllib3.PoolManager()\n        response = http.request('GET', image_url)\n        \n        if response.status != 200:\n            print(f\"Failed to fetch image from {image_url}, status code: {response.status}\")\n            return None\n        \n        # Convert image data to numpy array\n        image_array = np.asarray(bytearray(response.data), dtype=np.uint8)\n        image = cv2.imdecode(image_array, cv2.IMREAD_COLOR)\n        \n        if image is None:\n            print(f\"Failed to load image from {image_url}\")\n            return None\n\n        # Convert to HSV color space\n        hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\n\n        # Define the color range for processing\n        lower_bound = np.array([120, 50, 50])\n        upper_bound = np.array([180, 255, 255])\n\n        # Create a mask\n        mask = cv2.inRange(hsv, lower_bound, upper_bound)\n\n        # Invert the mask to keep text areas intact\n        mask_inv = cv2.bitwise_not(mask)\n\n        # Create a smoothed background\n        background = cv2.medianBlur(image, 21)\n        corrected_image = cv2.bitwise_and(background, background, mask=mask)\n        final_result = cv2.addWeighted(image, 0.7, corrected_image, 0.3, 0)\n\n        # Encode the processed image to Base64\n        _, buffer = cv2.imencode(\".jpg\", final_result)\n        base64_image = base64.b64encode(buffer).decode(\"utf-8\")\n\n        return base64_image\n    except Exception as e:\n        print(f\"Error processing {image_url}: {e}\")\n        return None\n\n# Process each image and update the JSON structure\noutput_data = []\n\nfor item in _items.all():\n    updated_blocks = []\n    for block in item[\"imageBlocks\"]:\n        if block[\"type\"] == \"image_url\":\n            image_url = block[\"image_url\"][\"url\"]\n            base64_image = process_image_from_url(image_url)\n            \n            if base64_image:\n                updated_blocks.append({\n                    \"type\": \"image_url\",\n                    \"image_url\": {\"url\": f\"data:image/jpeg;base64,{base64_image}\"}\n                })\n    \n    output_data.append({\"imageBlocks\": updated_blocks})\n\nreturn json.dumps(output_data, indent=4)"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -840,
        -760
      ],
      "id": "42624ebd-9364-4465-87c5-fb781aba11c0",
      "name": "Image-Post Processing"
    },
    {
      "parameters": {
        "resource": "search",
        "filters": {}
      },
      "type": "n8n-nodes-base.dropbox",
      "typeVersion": 1,
      "position": [
        -1900,
        -1000
      ],
      "id": "8f8729f5-106f-471b-a3dd-75c81f57bacc",
      "name": "Dropbox"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -1860,
        -480
      ],
      "id": "7286f73a-34bb-4abf-b086-76f482bbf46a",
      "name": "Merge"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import base64\nimport micropip\nawait micropip.install(\"pyodide-http\")\nimport pyodide.http\nimport pyodide\nimport asyncio\n\nasync def fetch_image_as_base64(url):\n    # Fetch image as binary using pyodide's fetch\n    response = await pyodide.http.pyfetch(url)\n    print(response.ok)\n    if response.ok:\n      image_bytes = await response.bytes()  # Read as binary\n    # Convert to base64\n      base64_encoded = base64.b64encode(image_bytes).decode(\"utf-8\")\n    \n    # Format as a Data URI\n      return f\"data:image/jpeg;base64,{base64_encoded}\"\n    else:\n      return None\n\nasync def process_images(images):\n    modified_images = []\n\n    for item in images:\n        image_blocks = item.json.imageBlocks.to_py(depth=1)  # Ensure shallow conversion\n        \n        for key in image_blocks:\n            new_url = await fetch_image_as_base64(key[\"image_url\"][\"url\"])\n            key[\"image_url\"][\"url\"] = new_url if new_url else key[\"image_url\"][\"url\"]\n\n        modified_images.append(item)  # Store modified items\n\n    return pyodide.ffi.to_js(modified_images)  # Convert entire list\n\n# Ensure the return statement is outside the loop\nreturn await process_images(_input.all())"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2180,
        -480
      ],
      "id": "fa48a9ad-dced-45cf-81e5-c1c06ea34f45",
      "name": "Convert JPG to Base64"
    },
    {
      "parameters": {
        "content": "## ^^Motivation-Inc^^ Needs a Redis implementation for their data. I just spun up a 90 day free trail to test it out \n\n\n--Nate Piantanida, Temerity Engineering, LLC",
        "height": 360,
        "width": 260
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2380,
        380
      ],
      "id": "77662bbe-78d9-47ef-8301-d8e456231cb6",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "model": "text-embedding-3-large",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        -2300,
        180
      ],
      "id": "8c43af05-cf29-44b0-b6ce-039b4bd47a32",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "QStpVDzaqxkFs4CU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "content": "## ^^Motivation-Inc^^ Needs a Supabase implementation for their data. I just spun up the free trail to test it out \n\n\n--Nate Piantanida, Temerity Engineering, LLC",
        "height": 360,
        "width": 280
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2060,
        380
      ],
      "id": "8adce36f-e870-42ac-9ca0-080fa53c8e4a",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "model": "text-embedding-3-large",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        -2080,
        20
      ],
      "id": "f4d3a504-c6ed-4f9e-8bae-f484df881969",
      "name": "Embeddings OpenAI1",
      "credentials": {
        "openAiApi": {
          "id": "QStpVDzaqxkFs4CU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        -2000,
        80
      ],
      "id": "916af12a-f6da-4990-8e7b-821208bec536",
      "name": "Default Data Loader"
    },
    {
      "parameters": {
        "chunkSize": 100000,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        -1840,
        200
      ],
      "id": "9ea0f7aa-abd5-4ee8-913a-fc589b1da5d3",
      "name": "Recursive Character Text Splitter"
    }
  ],
  "pinData": {
    "Google Drive Trigger": [
      {
        "json": {
          "kind": "drive#file",
          "fileExtension": "pdf",
          "copyRequiresWriterPermission": false,
          "md5Checksum": "489c059c23c02bf02ccf9e510745ffa6",
          "writersCanShare": true,
          "viewedByMe": true,
          "mimeType": "application/pdf",
          "parents": [
            "1AxigpIPGhDfygWjBffaGg38q0KHVhoFy"
          ],
          "thumbnailLink": "https://lh3.googleusercontent.com/drive-storage/AJQWtBPGYnvPAKMi9Vuq6GjsSEjWjjvrg-nAcP-0o7wg96kgs3LfTqgNoOJjAUG7tq1Wh2_S-QkIdR0zQttREpomU1c4CHugNPcon5jrg85gmMDJIQ=s220",
          "iconLink": "https://drive-thirdparty.googleusercontent.com/16/type/application/pdf",
          "shared": true,
          "lastModifyingUser": {
            "displayName": "Bryan Ritchie",
            "kind": "drive#user",
            "me": true,
            "permissionId": "07624072354371253555",
            "emailAddress": "britchie@ridgetech.biz",
            "photoLink": "https://lh3.googleusercontent.com/a/ACg8ocLSItesm980qB9CMZEw3gcMmhlJ5IJRSkRD8kgZYVAzr9LJXg=s64"
          },
          "owners": [
            {
              "displayName": "Bryan Ritchie",
              "kind": "drive#user",
              "me": true,
              "permissionId": "07624072354371253555",
              "emailAddress": "britchie@ridgetech.biz",
              "photoLink": "https://lh3.googleusercontent.com/a/ACg8ocLSItesm980qB9CMZEw3gcMmhlJ5IJRSkRD8kgZYVAzr9LJXg=s64"
            }
          ],
          "headRevisionId": "0B2R44tfAcYOjT21kTE9CRmxJSTBObVRtSFR4Vk5wR1BacWhNPQ",
          "webViewLink": "https://drive.google.com/file/d/109d5Zv0icQCjk321xpv-O2Z4suH3w65R/view?usp=drivesdk",
          "webContentLink": "https://drive.google.com/uc?id=109d5Zv0icQCjk321xpv-O2Z4suH3w65R&export=download",
          "size": "2678263",
          "viewersCanCopyContent": true,
          "permissions": [
            {
              "id": "07624072354371253555",
              "displayName": "Bryan Ritchie",
              "type": "user",
              "kind": "drive#permission",
              "photoLink": "https://lh3.googleusercontent.com/a/ACg8ocLSItesm980qB9CMZEw3gcMmhlJ5IJRSkRD8kgZYVAzr9LJXg=s64",
              "emailAddress": "britchie@ridgetech.biz",
              "role": "owner",
              "deleted": false,
              "pendingOwner": false
            },
            {
              "id": "05056809162391178186",
              "displayName": "bryan.ritchie2",
              "type": "user",
              "kind": "drive#permission",
              "photoLink": "https://lh3.googleusercontent.com/a-/ALV-UjXZzQBEhLKMtkOvD49cte6qvZnCy7gA-g_0Q_W9qbnmcplnHg=s64",
              "emailAddress": "bryan.ritchie2@gmail.com",
              "role": "writer",
              "deleted": false,
              "pendingOwner": false
            }
          ],
          "hasThumbnail": true,
          "spaces": [
            "drive"
          ],
          "id": "109d5Zv0icQCjk321xpv-O2Z4suH3w65R",
          "name": "Copy of CFS Southward Villages Certified Payroll 12, 13 ,14 Signed.pdf",
          "starred": false,
          "trashed": false,
          "explicitlyTrashed": false,
          "createdTime": "2025-01-26T00:56:13.987Z",
          "modifiedTime": "2025-01-26T00:56:13.987Z",
          "modifiedByMeTime": "2025-01-26T00:56:13.987Z",
          "viewedByMeTime": "2025-01-26T00:56:13.987Z",
          "quotaBytesUsed": "2678263",
          "version": "4",
          "originalFilename": "Copy of CFS Southward Villages Certified Payroll 12, 13 ,14 Signed.pdf",
          "ownedByMe": true,
          "fullFileExtension": "pdf",
          "isAppAuthorized": false,
          "capabilities": {
            "canChangeViewersCanCopyContent": true,
            "canEdit": true,
            "canCopy": true,
            "canComment": true,
            "canAddChildren": false,
            "canDelete": true,
            "canDownload": true,
            "canListChildren": false,
            "canRemoveChildren": false,
            "canRename": true,
            "canTrash": true,
            "canReadRevisions": true,
            "canChangeCopyRequiresWriterPermission": true,
            "canMoveItemIntoTeamDrive": true,
            "canUntrash": true,
            "canModifyContent": true,
            "canMoveItemOutOfDrive": true,
            "canAddMyDriveParent": false,
            "canRemoveMyDriveParent": true,
            "canMoveItemWithinDrive": true,
            "canShare": true,
            "canMoveChildrenWithinDrive": false,
            "canModifyContentRestriction": true,
            "canChangeSecurityUpdateEnabled": false,
            "canAcceptOwnership": false,
            "canReadLabels": false,
            "canModifyLabels": false,
            "canModifyEditorContentRestriction": true,
            "canModifyOwnerContentRestriction": true,
            "canRemoveContentRestriction": false
          },
          "thumbnailVersion": "1",
          "modifiedByMe": true,
          "permissionIds": [
            "07624072354371253555",
            "05056809162391178186"
          ],
          "linkShareMetadata": {
            "securityUpdateEligible": false,
            "securityUpdateEnabled": true
          },
          "sha1Checksum": "9cb8eaca12236d913d700a234b9863feb233afcc",
          "sha256Checksum": "9ff22d4b7646064329616419c2cfeeceeec40b04346f3d0ab9c4535a47370892"
        }
      }
    ],
    "Marshall to REST": [
      {
        "json": {
          "name": "Casares, Jorge M",
          "last4ssn": "4449",
          "workClassification": "Laborer",
          "totalHours": 1,
          "rateOfPay": 31.11,
          "grossAmountEarned": 31.11,
          "numberOfWithholdingExemptions": 0,
          "netWagesPaidForWeek": 1048.12
        }
      },
      {
        "json": {
          "name": "Arreaga Bravo, Celestino A",
          "last4ssn": "0349",
          "workClassification": "Laborer",
          "totalHours": 21,
          "rateOfPay": 21,
          "grossAmountEarned": 434.6,
          "numberOfWithholdingExemptions": 0,
          "netWagesPaidForWeek": 707.85
        }
      }
    ],
    "PUT Request": [
      {
        "json": {
          "updated": {
            "name": "Casares, Jorge M",
            "last4ssn": "4449",
            "workClassification": "Laborer",
            "rateOfPay": 31.11,
            "grossAmountEarned": 31.11,
            "deductions": {
              "FICA": 0,
              "taxWithholding": 0,
              "healthInsurance": 0,
              "retirement401k": 0,
              "other": 0,
              "totalDeductions": 0
            },
            "numberOfWithholdingExemptions": 0,
            "netWagesPaidForWeek": 1048.12
          }
        }
      },
      {
        "json": {
          "updated": {
            "name": "Arreaga Bravo, Celestino A",
            "last4ssn": "0349",
            "workClassification": "Laborer",
            "rateOfPay": 21,
            "grossAmountEarned": 434.6,
            "deductions": {
              "FICA": 0,
              "taxWithholding": 0,
              "healthInsurance": 0,
              "retirement401k": 0,
              "other": 0,
              "totalDeductions": 0
            },
            "numberOfWithholdingExemptions": 0,
            "netWagesPaidForWeek": 707.85
          }
        }
      }
    ]
  },
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        []
      ]
    },
    "Microsoft SharePoint HTTP Request": {
      "main": [
        []
      ]
    },
    "Google Drive Trigger": {
      "main": [
        [
          {
            "node": "Google Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive": {
      "main": [
        [
          {
            "node": "Is PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is PDF": {
      "main": [
        [
          {
            "node": "PDF-to-JPG2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PDF-to-JPG2": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Marshall to REST": {
      "main": [
        [
          {
            "node": "PUT Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PUT Request": {
      "main": [
        []
      ]
    },
    "AI Agent": {
      "main": [
        []
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "JPG-to-Img-Blocks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI OCR1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "JPG-to-Img-Blocks": {
      "main": [
        [
          {
            "node": "Convert JPG to Base64",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image-Post Processing": {
      "main": [
        []
      ]
    },
    "No Operation, do nothing": {
      "main": [
        [
          {
            "node": "Marshall to REST",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          },
          {
            "node": "Marshall to REST",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert JPG to Base64": {
      "main": [
        [
          {
            "node": "OpenAI OCR1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        []
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        []
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        []
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "timezone": "America/Denver",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "f7fdb9eb-1e83-4433-a0f6-cba6c01a7c8f",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "e8364e0b13ae51d7b6146101581a508e63209cf192eeadea66c54c238809c81a"
  },
  "id": "XiwKosSb7vJsberh",
  "tags": []
}